# -*- coding: utf-8 -*-
"""ReadIES.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19T7LJlMHFvND6eXWEEZXecYhupdGe4V_
"""

import re
import numpy as np
import os                         # función para abrir archivos EXR
os.environ["OPENCV_IO_ENABLE_OPENEXR"]="1"
import imageio                    # función para guarda archivos EXR
import cv2                        # libreria de vision por computadora (abrir imagenes, etc.)
import matplotlib.pyplot as plt   # funciones para representación gráfica
import numpy as np                # funciones para matrices
from scipy import interpolate     # funciones para interpolación
from scipy.interpolate import RegularGridInterpolator
import pandas as pd               # funciones para cargar excel

#Información tipo archivo: http://docs.autodesk.com/ACD/2011/ESP/filesAUG/WS73099cc142f48755f058a10f71c104f3-3b1a.htm

def load_IES(filename):
    with open(filename, 'r') as file:
        content = file.read()
    match = re.search(r'TILT=', content)
    if not match:
        raise ValueError('Formato de archivo IES no válido')
    else:
      file=content.splitlines()
      index=0
      #print(len(file))
      for x in range(len(file)):
        #print(file[x])
        match = re.search(r'TILT=', file[x])
        if match:
          index=x
          x=len(file)
    return file, index # devuelve una lista con el archivo fotométrico e indice en donde inicia TILT

def values (IES, index):
    val=IES[index+1].split()
    Lumen=val[1]
    fact=val[2]
    Num_vert_angle=int(val[3])
    Num_hori_angle=int(val[4])
    unid=int(val[6]) # 1 para pies o 2 para metros
    return (Lumen, fact,Num_vert_angle,Num_hori_angle,unid ) # devuelve parametros de la fotometría

def angles (file,index,num):
    aux=file[index].split()
    angle=np.array(aux)
    N_index = index +1
    N_angles=len(aux)
    if N_angles<num:
      for x in range(len(file)-index):
        aux=file[N_index].split()
        angle2=np.array(aux)
        N_angles=N_angles+len(aux)
        N_index = N_index +1
        angle = np.concatenate((angle, angle2), axis=0)
        if N_angles>=num:
          break
    angle = np.asarray(angle, dtype=float)
    return angle, N_index

def intensity_matrix (file,index,num_ver,num_hor):
    N_index = index
    mat=file[N_index].split()
    for x in range(len(file)-index-1):
      #print(N_index)
      N_index = N_index +1
      aux=file[N_index].split();
      mat=np.concatenate((mat, aux), axis=0)
    mat=np.resize(mat,(num_hor,num_ver))
    #print("Angulos Horizontales :",angle )
    mat = np.asarray(mat, dtype=float)
    return mat.T

